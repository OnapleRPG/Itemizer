buildscript {

    repositories {
        maven {
            name = 'gradle-plugins'
            url = 'https://plugins.gradle.org/m2'
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
    }

    dependencies {
        classpath 'gradle.plugin.net.minecrell:licenser:0.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'gradle.plugin.org.spongepowered:spongegradle:0.8.1'
        classpath 'eu.davidea:grabver:1.0.0'
    }

}

plugins {
    id 'org.spongepowered.plugin' version '0.9.0'
    id "org.sonarqube" version "2.5"
    id "eu.davidea.grabver" version "0.7.0"
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.plugin'


apply plugin: 'eu.davidea.grabver'

sourceCompatibility = 1.8
targetCompatibility = 1.8

versioning {
    // required (number)
    major = 2
    minor = 1
    patch = 0
}

version = versioning.name+'-'+versioning.build

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.ylinor'
            artifactId 'itemizer'
            version '1.3'

            from components.java
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/service/local/staging/deploy/maven2' }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
dependencies {
    compileOnly 'org.spongepowered:spongeapi:7.2.0-SNAPSHOT'
    testCompile "junit:junit:4.11"
    compile 'com.github.Sponge-RPG-dev:ConfigurateButWithBlackjackAndHookers:39d5fc8afd'
    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
}

sonarqube {
    properties {
        property "sonar.projectName", "Itemizer"
        property "sonar.organization", "ylinor-github"
        property "sonar.host.url", "https://sonarcloud.io/"
    }
}
test {
    testLogging {
        events "failed"
        exceptionFormat "short"
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}
jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
