

plugins {
    id 'java'
    id "org.sonarqube" version "2.8"
    id "eu.davidea.grabver" version "1.0.0"
    id 'org.spongepowered.plugin' version '0.8.1'
    id "com.jfrog.bintray" version "1.8.1"
    id 'maven-publish'
        // Other library plugins...
}

compileJava.options.encoding = 'UTF-8'

sponge {
    plugin {
        id = 'itemizer'
    }
}



apply plugin: 'org.spongepowered.plugin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

versioning {
    // required (number)
    major = 3
    minor = 3
    patch = 1
}
group = 'com.onaple'
version = "3.7.0"

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/service/local/staging/deploy/maven2' }
    maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
    }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

dependencies {
    compileOnly 'org.spongepowered:spongeapi:7.2.0'
    testCompile "junit:junit:4.11"
    compile 'com.github.Sponge-RPG-dev:ConfigurateButWithBlackjackAndHookers:39d5fc8afd'
}

sonarqube {
    properties {
        property "sonar.projectName", "Itemizer"
        property "sonar.organization", "ylinor-github"
        property "sonar.host.url", "https://sonarcloud.io/"
    }
}
jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_TOKEN')
    publications = ['MyPublication']
    pkg {
        repo = 'onaple'
        name = 'itemizer'
        userOrg = 'onaplerpg'
        licenses = ['Apache-2.0']
        vcsUrl = 'git@github.com:OnapleRPG/Itemizer.git'
        version {
            name = '3.7.0'
            released  = new Date()
            vcsTag = '3.7.0'
        }
    }
}
publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'com.onaple'
            artifactId 'itemizer'
            version '3.7.0'
        }
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}
